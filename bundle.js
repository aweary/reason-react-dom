(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react-reconciler'), require('bs-platform/lib/es6/js_null_undefined.js')) :
	typeof define === 'function' && define.amd ? define(['exports', 'react-reconciler', 'bs-platform/lib/es6/js_null_undefined.js'], factory) :
	(factory((global.ReactDOM = {}),global.ReactReconciler,global.Js_null_undefined));
}(this, (function (exports,ReactReconciler,Js_null_undefined) { 'use strict';

var ReactReconciler__default = ReactReconciler['default'];

// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
function commitUpdate(_, _$1, _$2, _$3, _$4, _$5) {
  return /* () */0;
}

function commitMount(_, _$1, _$2, _$3) {
  return /* () */0;
}

function commitTextUpdate(textInstance, _, newText) {
  textInstance.nodeValue = newText;
  return /* () */0;
}

function resetTextContent(element) {
  element.textContent = "";
  return /* () */0;
}

function appendChild(parent, child) {
  parent.appendChild(child);
  return /* () */0;
}

function appendChildToContainer(container, child) {
  child.appendChild(container);
  return /* () */0;
}

function insertBefore(parentInstance, child, beforeChild) {
  parentInstance.insertBefore(child, beforeChild);
  return /* () */0;
}

function removeChild(parentInstance, child) {
  parentInstance.removeChild(child);
  return /* () */0;
}

function make$1() {
  return {
          commitUpdate: commitUpdate,
          commitMount: commitMount,
          commitTextUpdate: commitTextUpdate,
          resetTextContent: resetTextContent,
          appendChild: appendChild,
          appendChildToContainer: appendChildToContainer,
          insertBefore: insertBefore,
          insertInContainerBefore: insertBefore,
          removeChild: removeChild,
          removeChildFromContainer: removeChild
        };
}


/* No side effect */

// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
function getRootHostContext() {
  return "";
}

function getChildHostContext(_, _$1, _$2) {
  return "";
}

function getPublicInstance(instance) {
  return instance;
}

function createInstance(t, _, _$1, _$2, _$3) {
  return document.createElement(t);
}

function appendInitialChild(parent, child) {
  parent.appendChild(child);
  return /* () */0;
}

function finalizeInitialChildren(_, _$1, _$2, _$3) {
  return false;
}

function prepareUpdate(_, _$1, _$2, _$3, _$4, _$5) {
  return Js_null_undefined.from_opt(/* Some */[/* array */[]]);
}

function shouldSetTextContent(_, _$1) {
  return false;
}

function shouldDeprioritizeSubtree(_, _$1) {
  return false;
}

function createTextInstance(text, _, _$1, _$2) {
  return document.createTextNode(text);
}

function scheduleDeferredCallback(_, _$1) {
  return Date.now();
}

function cancelDeferredCallback() {
  return /* () */0;
}

function prepareForCommit() {
  return /* () */0;
}

function resetAfterCommit() {
  return /* () */0;
}

function make() {
  return {
          getRootHostContext: getRootHostContext,
          getChildHostContext: getChildHostContext,
          getPublicInstance: getPublicInstance,
          createInstance: createInstance,
          appendInitialChild: appendInitialChild,
          finalizeInitialChildren: finalizeInitialChildren,
          prepareUpdate: prepareUpdate,
          shouldSetTextContent: shouldSetTextContent,
          shouldDeprioritizeSubtree: shouldDeprioritizeSubtree,
          createTextInstance: createTextInstance,
          scheduleDeferredCallback: scheduleDeferredCallback,
          cancelDeferredCallback: cancelDeferredCallback,
          prepareForCommit: prepareForCommit,
          resetAfterCommit: resetAfterCommit,
          now: (function () {
              return Date.now();
            }),
          mutation: make$1(/* () */0)
        };
}


/* No side effect */

// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
var config = make(/* () */0);

ReactReconciler__default(config);


/* config Not a pure module */

exports.config = config;

Object.defineProperty(exports, '__esModule', { value: true });

})));
